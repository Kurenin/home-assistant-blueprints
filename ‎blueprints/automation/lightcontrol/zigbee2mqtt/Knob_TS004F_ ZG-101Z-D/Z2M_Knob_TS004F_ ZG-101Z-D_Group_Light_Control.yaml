blueprint:
  name: Tuya Smart Knob — Master Brightness for Multiple Groups (smart pre-power + availability filter + resync)
  description: >
    A Tuya rotary knob (ZG-101Z/D, TS004F, etc.) controls a single "master brightness" (input_number 0–100),
    which is applied in sync to all selected lights/groups. Includes smart pre-power:
    if ALL pre-power devices were Off, any action turns them all On; otherwise leaves relays untouched.
    During rotation you can apply brightness only to available (non-unavailable) targets.
    When any target becomes ON again, auto-resync applies the current master brightness.
    Works with both JSON and /action (enter an MQTT topic with /#). No operation_mode is sent.

  domain: automation
  # Optional: set your blueprint source URL after you push to GitHub (enables "Import Blueprint" button links)
  # source_url: https://raw.githubusercontent.com/Kurenin/home-assistant-blueprints/main/zigbee/tuya_smart_knob_master_brightness.yaml

  input:
    mqtt_topic:
      name: Device MQTT topic (include /#)
      description: "Example: zigbee2mqtt/Knob/# — to catch both JSON and /action."
      selector: { text: {} }

    target_lights:
      name: Target lights/groups (multiple)
      description: "All these entities will receive the same brightness."
      selector:
        entity:
          filter: [{ domain: [light] }]
          multiple: true

    master_brightness_helper:
      name: Master brightness (input_number 0–100)
      description: "Helper entity to store the shared brightness for all groups."
      selector:
        entity:
          filter: [{ domain: [input_number] }]

    pre_power_entities:
      name: Pre-power devices (optional, multiple)
      description: "Switches/lights to power before applying brightness (used by smart pre-power)."
      default: []
      selector:
        entity:
          filter: [{ domain: [switch, light] }]
          multiple: true

    pre_power_delay:
      name: Delay after pre-power (s)
      default: 0.3
      selector:
        number:
          min: 0.0
          max: 3.0
          step: 0.1
          unit_of_measurement: seconds

    single_click_behavior:
      name: Single-click action
      default: toggle_pre_power
      selector:
        select:
          options: [toggle_pre_power, toggle_lights]

    # steps
    fallback_step_pct_command:
      name: Step in COMMAND mode (%), if action_step_size is missing
      default: 8
      selector: { number: { min: 1, max: 25, step: 1, unit_of_measurement: "%" } }

    step_pct_event:
      name: Step in EVENT mode (%)
      default: 8
      selector: { number: { min: 1, max: 25, step: 1, unit_of_measurement: "%" } }

    # master brightness limits
    min_brightness_pct:
      name: Minimum master brightness (%)
      default: 5
      selector: { number: { min: 0, max: 100, step: 1, unit_of_measurement: "%" } }

    max_brightness_pct:
      name: Maximum master brightness (%)
      default: 100
      selector: { number: { min: 1, max: 100, step: 1, unit_of_measurement: "%" } }

    light_transition:
      name: Brightness transition (s)
      default: 0.2
      selector:
        number:
          min: 0.0
          max: 3.0
          step: 0.1
          unit_of_measurement: seconds

    power_on_with_rotate:
      name: Turn lights on when rotating if they were Off (apply master brightness)
      default: true
      selector: { boolean: {} }

    smart_pre_power_all_on_if_all_off:
      name: Smart pre-power — turn everything On only if all were Off
      default: true
      selector: { boolean: {} }

    apply_only_available:
      name: Adjust only available targets
      description: "On rotation, update only lights/groups that are not 'unavailable'."
      default: true
      selector: { boolean: {} }

    resync_on_restore:
      name: Restore brightness on power return
      description: "When any target turns ON — apply the current master brightness."
      default: true
      selector: { boolean: {} }

    automation_mode:
      name: Automation execution mode
      default: queued
      selector:
        select:
          options: [single, restart, queued, parallel]

# Listen for knob events and for targets coming back to ON
trigger:
  - platform: mqtt
    topic: !input mqtt_topic

  - platform: state
    entity_id: !input target_lights
    to: "on"

# Pass through only: state-trigger OR a non-empty MQTT command
condition:
  - condition: template
    value_template: >
      {{ trigger.platform == 'state' or
         ((trigger.payload_json.action if (trigger.payload_json is defined)
           else trigger.payload) | default('') | string | length > 0) }}

action:
  - variables:
      mqtt_topic: !input mqtt_topic
      base_topic: >-
        {% set t = (mqtt_topic | string) %}
        {% if t.endswith('/#') %}{{ t[:-2] }}{% else %}{{ t }}{% endif %}

      command: >-
        {% if trigger.payload_json is defined and trigger.payload_json is not none %}
          {{ trigger.payload_json.action | default('') }}
        {% else %}
          {{ trigger.payload | default('') }}
        {% endif %}
      action_step_size: >-
        {% if trigger.payload_json is defined and trigger.payload_json is not none %}
          {{ trigger.payload_json.action_step_size }}
        {% else %}{{ none }}{% endif %}
      op_mode: >-
        {% if trigger.payload_json is defined and trigger.payload_json is not none %}
          {{ (trigger.payload_json.operation_mode | default('command')) | lower }}
        {% else %}command{% endif %}

      target_lights: !input target_lights
      master_brightness_helper: !input master_brightness_helper
      pre_power_entities: !input pre_power_entities
      pre_power_delay: !input pre_power_delay
      single_click_behavior: !input single_click_behavior
      power_on_with_rotate: !input power_on_with_rotate
      light_transition: !input light_transition
      smart_pre_power_all_on_if_all_off: !input smart_pre_power_all_on_if_all_off
      apply_only_available: !input apply_only_available
      resync_on_restore: !input resync_on_restore

      min_brightness_pct: !input min_brightness_pct
      max_brightness_pct: !input max_brightness_pct

      fallback_step_pct_command: !input fallback_step_pct_command
      step_pct_event: !input step_pct_event
      computed_step_pct: >-
        {% if op_mode == 'command' %}
          {% if is_number(action_step_size) %}
            {{ (action_step_size | float(0)) / 2 }}
          {% else %}
            {{ (fallback_step_pct_command | float(8)) }}
          {% endif %}
        {% else %}
          {{ (step_pct_event | float(8)) }}
        {% endif %}

      regulate_commands: >
        {{ ['rotate_left','rotate_right','brightness_step_up','brightness_step_down'] }}

      # Pre-power state
      pre_all: "{{ expand(pre_power_entities) if (pre_power_entities | count) > 0 else [] }}"
      pre_on_cnt: "{{ pre_all | selectattr('state','eq','on') | list | count }}"
      pre_off_cnt: "{{ pre_all | selectattr('state','in',['off','unavailable','unknown']) | list | count }}"
      pre_all_off: "{{ (pre_all | count > 0) and (pre_on_cnt == 0) and (pre_off_cnt > 0) }}"

      # Effective targets (skip 'unavailable' if the option is enabled)
      effective_targets: >-
        {% if apply_only_available %}
          {{ expand(target_lights)
             | selectattr('state','in',['on','off'])
             | map(attribute='entity_id')
             | list }}
        {% else %}
          {{ target_lights }}
        {% endif %}

  # Resync on power restore
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'state' and resync_on_restore }}"
        sequence:
          - variables:
              _pct: "{{ states(master_brightness_helper) | float(0) }}"
              _bri_255: "{{ (_pct * 255 / 100) | int }}"
          - service: light.turn_on
            target:
              entity_id: "{{ effective_targets | join(', ') }}"
            data:
              brightness: "{{ _bri_255 }}"
              transition: "{{ light_transition | float(0) }}"
          - stop: "Resync applied"

  # Smart pre-power: if ALL are Off and any action arrives — turn everything On
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ smart_pre_power_all_on_if_all_off and pre_all_off and
                 (command in ['single','toggle'] or command in regulate_commands) }}
        sequence:
          - service: homeassistant.turn_on
            target: { entity_id: !input pre_power_entities }
          - delay: { seconds: "{{ pre_power_delay | float(0) }}" }

  # Knob commands
  - choose:
      # Single click
      - conditions:
          - condition: template
            value_template: "{{ command in ['single','toggle'] }}"
        sequence:
          - choose:
              # toggle_pre_power + smart option → if all Off, pre-power was already done above
              - conditions:
                  - condition: template
                    value_template: >
                      {{ single_click_behavior == 'toggle_pre_power' and smart_pre_power_all_on_if_all_off and pre_all_off }}
                sequence: []
              # toggle_pre_power + smart option → if not all Off, leave pre-power devices untouched
              - conditions:
                  - condition: template
                    value_template: >
                      {{ single_click_behavior == 'toggle_pre_power' and smart_pre_power_all_on_if_all_off and (not pre_all_off) }}
                sequence: []
              # smart option disabled — legacy behavior: toggle pre-power devices
              - conditions:
                  - condition: template
                    value_template: >
                      {{ single_click_behavior == 'toggle_pre_power' and (not smart_pre_power_all_on_if_all_off) }}
                sequence:
                  - service: homeassistant.toggle
                    target: { entity_id: !input pre_power_entities }
              # otherwise (toggle_lights) — toggle lights
              - conditions: []
                sequence:
                  - service: homeassistant.toggle
                    target: { entity_id: !input target_lights }

      # Rotate right — increase master brightness and apply to effective targets
      - conditions:
          - condition: template
            value_template: "{{ command in ['rotate_right','brightness_step_up'] }}"
        sequence:
          - variables:
              _cur_pct: "{{ states(master_brightness_helper) | float(0) }}"
              _new_pct: "{{ [_cur_pct + (computed_step_pct | float(0)), max_brightness_pct | float(100)] | min }}"
              _bri_255: "{{ (_new_pct | float(0)) * 255 / 100 | int }}"
          - service: input_number.set_value
            target: { entity_id: !input master_brightness_helper }
            data: { value: "{{ _new_pct }}" }
          - service: light.turn_on
            target:
              entity_id: "{{ effective_targets | join(', ') }}"
            data:
              brightness: "{{ _bri_255 }}"
              transition: "{{ light_transition | float(0) }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ power_on_with_rotate }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ effective_targets | join(', ') }}"

      # Rotate left — decrease master brightness and apply to effective targets
      - conditions:
          - condition: template
            value_template: "{{ command in ['rotate_left','brightness_step_down'] }}"
        sequence:
          - variables:
              _cur_pct: "{{ states(master_brightness_helper) | float(0) }}"
              _new_pct: "{{ [_cur_pct - (computed_step_pct | float(0)), min_brightness_pct | float(0)] | max }}"
              _bri_255: "{{ (_new_pct | float(0)) * 255 / 100 | int }}"
          - service: input_number.set_value
            target: { entity_id: !input master_brightness_helper }
            data: { value: "{{ _new_pct }}" }
          - service: light.turn_on
            target:
              entity_id: "{{ effective_targets | join(', ') }}"
            data:
              brightness: "{{ _bri_255 }}"
              transition: "{{ light_transition | float(0) }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ power_on_with_rotate }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ effective_targets | join(', ') }}"

mode: !input automation_mode

